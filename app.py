import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import os

# üõ†Ô∏è Configurar la p√°gina
st.set_page_config(page_title="Nuevo Tablero de Monitoreo", page_icon="üìä", layout="wide")

# üì¢ T√≠tulo del tablero
st.title("üìä Nuevo Tablero de Monitoreo del Sistema")

# üíû Cargar Dataset
DATASET_URL = "dataset_procesado.csv"
if not os.path.exists(DATASET_URL):
    st.error("‚ùå Error: El dataset no se encuentra en la ruta especificada.")
    st.stop()

df = pd.read_csv(DATASET_URL)
df.columns = df.columns.str.strip()
df['Fecha'] = pd.to_datetime(df['Fecha'])

# üìå Filtros
estados_seleccionados = st.multiselect("Selecciona uno o m√°s Estados:", df["Estado del Sistema"].unique(), default=df["Estado del Sistema"].unique())
df_filtrado = df[df["Estado del Sistema"].isin(estados_seleccionados)]

# üìå C√°lculo de nuevas m√©tricas
# Evitar divisiones por cero en eficiencia t√©rmica
df_filtrado = df_filtrado.replace({"Temperatura (¬∞C)": {0: np.nan}})
df_filtrado.dropna(subset=["Temperatura (¬∞C)"], inplace=True)
df_filtrado["Eficiencia T√©rmica"] = df_filtrado["Uso CPU (%)"] / df_filtrado["Temperatura (¬∞C)"]
df_filtrado["Eventos Cr√≠ticos"] = df_filtrado["Estado del Sistema"].apply(lambda x: 1 if x == "Cr√≠tico" else 0)

# üîπ Secci√≥n 1: KPIs y Estado Actual
st.header("üìå Estado Actual")
kpi1, kpi2, kpi3 = st.columns(3)
kpi1.metric("Uso Promedio CPU (%)", round(df_filtrado["Uso CPU (%)"].mean(), 2))
kpi2.metric("Temperatura Media (¬∞C)", round(df_filtrado["Temperatura (¬∞C)"].mean(), 2))
kpi3.metric("Eficiencia T√©rmica", round(df_filtrado["Eficiencia T√©rmica"].mean(), 2))

col1, col2 = st.columns(2)
with col1:
    st.plotly_chart(px.pie(df_filtrado, values="Eventos Cr√≠ticos", names="Estado del Sistema", title="üìä Distribuci√≥n de Estados"), use_container_width=True)
    st.plotly_chart(px.bar(df_filtrado, x="Estado del Sistema", y=["Uso CPU (%)", "Memoria Utilizada (%)", "Carga de Red (MB/s)"], barmode="group", title="üìä Uso de Recursos"), use_container_width=True)
with col2:
    st.plotly_chart(px.scatter(df_filtrado, x="Uso CPU (%)", y="Temperatura (¬∞C)", color="Estado del Sistema", title="üìä Relaci√≥n entre Uso de CPU y Temperatura"), use_container_width=True)
    st.plotly_chart(px.box(df_filtrado, y=["Uso CPU (%)", "Temperatura (¬∞C)"], title="üìä Distribuci√≥n de Outliers"), use_container_width=True)

# üîπ Secci√≥n 2: Modelado Predictivo
st.header("üìà Predicci√≥n de Estados del Sistema")
le = LabelEncoder()
df_filtrado["Estado Codificado"] = le.fit_transform(df_filtrado["Estado del Sistema"])
features = ["Uso CPU (%)", "Memoria Utilizada (%)", "Carga de Red (MB/s)"]
X = df_filtrado[features]
y = df_filtrado["Estado Codificado"]

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({"Feature": features, "Importancia": importances}).sort_values(by="Importancia", ascending=False)
st.plotly_chart(px.bar(feature_importance_df, x="Feature", y="Importancia", title="üìä Importancia de Variables en la Predicci√≥n"), use_container_width=True)

# Mostrar m√©tricas del modelo
st.subheader("üìä Evaluaci√≥n del Modelo Predictivo")
st.write(f"Precisi√≥n del modelo: {model.score(X, y):.2f}")

# üîπ Secci√≥n 3: Alertas Din√°micas
st.header("‚ö†Ô∏è Alertas del Sistema")
umbral_cpu = st.slider("Selecciona umbral de CPU para alerta:", 50, 100, 85)
alta_carga = df_filtrado[df_filtrado["Uso CPU (%)"] > umbral_cpu]
if not alta_carga.empty:
    st.warning("‚ö†Ô∏è Se han detectado valores altos de uso de CPU.")
    st.dataframe(alta_carga[["Fecha", "Uso CPU (%)", "Estado del Sistema"]])
else:
    st.success("‚úÖ No se detectaron anomal√≠as en el uso de CPU.")
